#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class StreamInfo(object):
    """
    Attributes:
     - url
     - framerate
     - exp_vid_param
     - vcodec
     - format
     - resolution
    """


    def __init__(self, url=None, framerate=None, exp_vid_param=None, vcodec=None, format=None, resolution=None,):
        self.url = url
        self.framerate = framerate
        self.exp_vid_param = exp_vid_param
        self.vcodec = vcodec
        self.format = format
        self.resolution = resolution

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.framerate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.exp_vid_param = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.vcodec = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.format = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.resolution = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamInfo')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.framerate is not None:
            oprot.writeFieldBegin('framerate', TType.STRING, 2)
            oprot.writeString(self.framerate.encode('utf-8') if sys.version_info[0] == 2 else self.framerate)
            oprot.writeFieldEnd()
        if self.exp_vid_param is not None:
            oprot.writeFieldBegin('exp_vid_param', TType.STRING, 3)
            oprot.writeString(self.exp_vid_param.encode('utf-8') if sys.version_info[0] == 2 else self.exp_vid_param)
            oprot.writeFieldEnd()
        if self.vcodec is not None:
            oprot.writeFieldBegin('vcodec', TType.STRING, 4)
            oprot.writeString(self.vcodec.encode('utf-8') if sys.version_info[0] == 2 else self.vcodec)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.STRING, 5)
            oprot.writeString(self.format.encode('utf-8') if sys.version_info[0] == 2 else self.format)
            oprot.writeFieldEnd()
        if self.resolution is not None:
            oprot.writeFieldBegin('resolution', TType.STRING, 6)
            oprot.writeString(self.resolution.encode('utf-8') if sys.version_info[0] == 2 else self.resolution)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(StreamInfo)
StreamInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'url', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'framerate', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'exp_vid_param', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'vcodec', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'format', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'resolution', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs
